'''
'''
'''
假设 L 是一个列表，表达式 L=start：stop：step] 返回列表 L 的一部分，从索引开始（包括）到索引停止（独占），以步长为步长。
切片语法：
L[开始：停止：步骤]
开始：启动位置
停止：停止位置
步骤：增量
'''
'''

L = 列表（"abcdefghi")
打印（L)

# 正指数： 0 1 2 3 4 5 6 7 8
\ 'a'， 'b'， 'c'， 'd'， 'e'， 'f'， 'g'， 'h'， 'i'\
# 负指数： -9 -8 -7 -6 -5 -4 -3 -2 -1

打印（"1） 基本示例---------------------------------")
[L[2] 包含在内。不包括 L[7]。
# 这与范围 （2，10） 相同，它生成数字 =2，10），包括 2（闭合间隔），10 排除（打开间隔）
打印（L=2：7+） = 请在这里找出并键入输出值， 运行它， 验证您的答案。
# 开始： 2
# 停止： 7
# 步骤： 1
[L[2：7] 没有步骤， 所以 Python 假设步骤等于 1
[所以 L[2：7] 等于 L[2：7：1]
打印（L=2：7：1+） [ 请找出并键入输出在这里， 运行它， 验证您的答案。


打印（"2） 带负指数的------------------")
打印（L+-7：-2+） * 请找出并键入输出在这里， 运行它， 验证您的答案。
# 开始： - 7
• 停止： - 2
# 步骤： 1
[L]-7：-2] 没有步骤，因此 Python 假定步骤等于 1
[所以 L[-7：-2] 等于 L[-7：-2：1]
打印（L+-7：-2：1+） [ 请找出并键入输出在这里， 运行它， 验证您的答案。


打印（"3） 带正负指数的切片------------------")
打印（L=2：-5+） * 请找出并键入输出在这里， 运行它， 验证您的答案。

打印（"4） 指定切片步骤------------------------------")
打印（L=2：7：2]） [ 请找出并键入输出在这里， 运行它， 验证您的答案。

打印（"5） 负步进大小---------------------------------------")
打印（L=6：1：-2]） [请找出并键入输出在这里， 运行它， 验证您的答案。

打印（"6） 开始和结束的---------------------------------")
打印（L+：3+） = 请在这里找出并键入输出， 运行它， 验证您的答案。
#L[：3] 没有步骤，因此 Python 假定步骤等于 1
# 当步骤等于 1 时，当缺少开始时，Python 假定切片从左开始。
#L[：3] 等于L[0：3]

打印（L=6：+） * 请在这里找出并键入输出， 运行它， 验证您的答案。
#L[6：] 没有步骤，因此 Python 假定步骤等于 1
# 当步骤等于 1 时，当缺少停止时，Python 假定切片结束到右端。
#L[6：] 等于 L[6：len（L）]

打印（"7） 反转列表---------------------------------")
打印（L*：-1+） * 请找出并键入输出在这里， 运行它， 验证您的答案。
• 启动丢失，停止丢失，步骤 = -1
# 在这种情况下，Python 假定开始等于右端，停止等于左开始。

打印（"8） 修改多个列表值------------------------")
L = 列表（"abcde")

# 正指数： 0 1 2 3 4
\ 'a'， 'b'， 'c'， 'd'， 'e'\
# 负指数： -5 -4 -3 -2 -1
L=1：4 = = 1，2，3]
打印（L） # 请找出并键入输出在这里， 运行它， 验证您的答案.

L = 列表（"abcde")
L=1：2 = = 1，2，3]
打印（L） # 请找出并键入输出在这里， 运行它， 验证您的答案.

打印（"9） 插入多个列表项------------------------")
L = 列表（"abc")

# 正指数： 0 1 2
{'a'，'b'，'c'，]
# 负指数： -3 -2 -1

L=：0 = = 1，2，3]
[L]：0} 没有步骤，因此步骤 = 1
# 当步骤 = 1 时，缺少开始，Python 假定切片从左开始。
[L[：0] 等于 L[0：0]
# 当开始等于停止时，它指向索引左侧的位置
打印（L） # 请找出并键入输出在这里， 运行它， 验证您的答案.

L = 列表（"abc")
L=len（L）： = = = 1、2、3]
#L[len（L）：]没有步骤，所以步骤 = 1
#When步骤 = 1，缺少停止，Python 假定切片结束到右端。
#L=len（L）：= 等于 ot L=len（L）：len（L）=
# 当开始等于停止时，它指向索引左侧的位置。
[所以 L= len（L）： len（L）] 指向 "c" 的右侧
打印（L） # 请找出并键入输出在这里， 运行它， 验证您的答案.
'''
'''
assume l is a list
expression l[start:stop:step] returns a portion of list l starts from index 
start(inclusive)to index stop(exclusive),at a step size
synnax:
l[start:stop:step]
'''
L = list("abcdefghi")
print(L)

# 正指数： 0 1 2 3 4 5 6 7 8
#    \ 'a'， 'b'， 'c'， 'd'， 'e'， 'f'， 'g'， 'h'， 'i'\
# 负指数： -9 -8 -7 -6 -5 -4 -3 -2 -1

print("1） 基本示例---------------------------------")
#L[2]包含 L[7]不包含。
# 这与范围 （2，10） 相同，它生成数字 =2，10），包括 2（闭合间隔），10 排除（打开间隔）
print(L[2:7]) #['c', 'd', 'e', 'f', 'g']
print(L[2:7:1])#['c', 'd', 'e', 'f', 'g']
print("2） 负指数-----------------------------------")
print(L[-7:-2])#['c', 'd', 'e', 'f', 'g']
print(L[-7:-2:1])#['c', 'd', 'e', 'f', 'g']
print("3） 都包含-----------------------------------")
print(L[2:-5])#['c', 'd']
print("4） 精细の步骤--------------------------------")
print(L[2:7:2])#['c', 'e', 'g']
print("5） negative step slice---------------------")
print(L[6:1:-2])#['g', 'e', 'c']
print("6） Slice at beginning & end=---------------")
print(L[:3])#['a', 'b', 'c']
#this equals to L[0:3]
print(L[6:])#['g', 'h', 'i']
#this equals to L[6:len(L)]
print("7） reverse a list=-------------------------")
print(L[::-1])#['i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']
######  ↑↑ ↑
######python will print L with right begin left end
print("8） modify multiple list value--------------")
l=list('abcde')
l[1:4]=[1,2,3]#
print(l)
print("9） insert multiple list items--------------")
l[:0]=[1,2,3]#['a', 1, 2, 3, 'e']
#这个东西指向一个点，插入123
l=list('abc')
l[len(l):]=[1,2,3]#['a', 'b', 'c', 1, 2, 3]

print(l)
print("10) Delete Multiple List Items ------------------------")
L = list("abcde")


# positive index:     0    1    2    3    4
#                   ['a', 'b', 'c', 'd', 'e']
# negative index:     -5   -4   -3   -2   -1

L[1:5] = []
print(L)

L = list("abcde")
del L[1:5]
print(L)

print("11) Clone or Copy a list ----------------------------")
L = list("abcde")
print(L)

L2 = L[:]
print(L2)
print(L2 is L) # false
##is operator is to check whether they are the same objector they are diffrent objects with same value
